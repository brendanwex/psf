<?php 
/* Cachekey: cache/stash_default/documentation\api\php\777593e94d61b2a2028df425f0eeb61d/ */
/* Type: array */
/* Expiration: 2019-07-16T03:14:56+02:00 */



$loaded = true;
$expiration = 1563239696;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1562841840;

